// WARNING: Most values could be changed even after QTV is started with console, but not all of them.

// Password for accessing this QTV. Default is empty.
// Most of the time you don't have to touch it.
// qtv_password ""

// hostname provides ability to specify description of this QTV. It would be seen in clients server browser.
// hostname "unnamed"

// External address:port of QTV. QTV provides that address to MVDSV. MVDSV provides that address to clients server browser.
// Default value is empty. Value is optional but highly recommended to be set properly.
// address ""

// Interface address:port QTV listen for incoming connections. If address is empty then QTV will listen on all interfaces.
// Most of the time you don't have to touch it.
// listen_address ":28000"

// network allows to choose protocol family for all network communications.
// "" (empty) - both IPv4 and IPv6 (default), "4" - IPv4 only, "6" - IPv6 only.
// network ""

// log_level provides verbosity logging level.
// Possible values: "trace", "debug", "info" (default), "warn", "error", "fatal", "panic".
// log_level "info"

// log_pretty toggles between json and pretty log format. 0 - json, 1 - pretty (default).
// Json log format is much faster, consumes less resources and could be parsed by various external tools like logstash and such.
// Pretty log format uses colours and more human readable but inefficient.
// log_pretty 1

// log_timeformat provides time format for logging.
// For details consider https://pkg.go.dev/time@latest#pkg-constants
// log_timeformat "2006-01-02T15:04:05.000"

// maxclients limits amount of downstreams this QTV willing to serve.
// maxclients 1000

// maxservers limits amount of upstreams this QTV willing to serve.
// maxservers 100

// maxchains controls how much @ characters could be in qtv server address, this effectively limits chaining.
// Most of the time you don't have to touch it.
// maxchains 1

// parse_delay controls delay in seconds this QTV add to live games in order to prevent ghosting.
// parse_delay 7

// tick_time controls how frequently QTV wake up in milliseconds, this helps to reduce CPU usage.
// Range is from 100 (default) to 1000 milliseconds. You may try to set it higher than default if you have high CPU usage.
// Most of the time you don't have to touch it.
// tick_time 100

// masters provides list of QW master servers.
// QTV will try to register on them, so eventually clients will get that information as well.
// Most of the time you don't have to touch it.
// masters "master.quakeworld.nu master.quakeservers.net qwmaster.fodquake.net"

// Downstream read buffer size in bytes.
// dstream_read_buf_size 32768

// Downstream write buffer size in bytes.
// dstream_write_buf_size 65536

// Downstream timeout in seconds
// dstream_timeout 30

// Upstream read buffer in bytes.
// ustream_read_buf_size 327680

// Upstream write buffer in bytes.
// ustream_write_buf_size 32768

// Upstream timeout in seconds.
// ustream_timeout 60

// Permissions for downloading various data from QTV.
// allow_download 1
// allow_download_demos 1
// allow_download_maps 1
// allow_download_models 1
// allow_download_other 1
// allow_download_skins 1
// allow_download_sounds 1

// demo_dir provides possibility to specify directory where demos located.
// Only letters/digits and _ characters allowed.
// demo_dir "demos"

// Chat flood protection.
// fp_messages    4 // 4 messages allowed
// fp_persecond   2 // per 2 seconds
// fp_secondsdead 2 // 2 seconds silence if above limits exceeded.

// http_enabled allows to enable/disable HTTP interface. 1 - enabled (default), 0 - disabled.
// http_enabled 1

// http_idletimeout provides idle (after request complete) timeout for HTTP connections in seconds.
// http_idletimeout 60

// http_readtimeout provides read timeout for HTTP request in seconds.
// http_readtimeout 45

// http_writetimeout provides write timeout for HTTP request in seconds.
// It is huge so slow clients have chance to complete big request (demo download for example).
// http_writetimeout 600

// http_upload_enabled allows to enable/disable demo upload via HTTP interface. 1 - enabled (default), 0 - disabled.
// http_upload_enabled 1

// http_upload_total_limit controls total size in bytes of upload files,
// if upload files occupy more than that space then oldest files removed, clean up permormed once per minute.
// Default value is 64 megabytes (in bytes).

// http_upload_file_limit limits maximum size in bytes of one uploaded file.
// Default value is 32 megabytes (in bytes).

// HTTPS is optional.
// If you willing to enable HTTPS then you have to provide certificate/key.
// Enabling HTTPS will also enable HTTP/2 protocol. Without HTTPS only HTTP 1.1 used.

// Path to http server certificate file. Default value is empty. Required if you willing to enable HTTPS.
// http_server_cert_file ""

// Path to http server key file. Default value is empty. Required if you willing to enable HTTPS.
// http_server_key_file ""

// In order to add stream(s) to QTV you have to use "qtv" command.
// qtv localhost:28501 QTV_PASSWORD_AT_MVDSV
// qtv localhost:28502 QTV_PASSWORD_AT_MVDSV
// qtv localhost:28503 QTV_PASSWORD_AT_MVDSV
// If remote source does not have password you can omit it.
// You have to provide proper address and port(s), localhost here is just an example.
